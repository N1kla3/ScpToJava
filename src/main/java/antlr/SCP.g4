grammar SCP;

WHITESPACE: [ \t\r\n]+ -> skip;
NUMBER:'number';

NODE:(NAME|EMPTY_CIRCLE|EMPTY_CIRCLE_WITH_NAME|NUM);
ROLE: 'rrel_'(NAME|NUM);
NUM:[0-9]+;
NAME:[a-z]+|[A-Z]+;

UNARY_RELATION_RIGHT:'->';
UNARY_RELATION_LEFT:'<-';
BINARY_RELATION_RIGHT:'=>';
BINARY_RELATION_LEFT:'<=';
END_POINT:';;';
BLOCK_START:'(*';
BLOCK_END:'*)';
EMPTY_CIRCLE:'...';
EMPTY_CIRCLE_WITH_NAME:'..'NAME;
DVOETOCHIE: ':';



NREL:'nrel_';
NREL_ITERATION_VAR:NREL'iteration_variable';
NREL_VALUE: NREL 'value';
NREL_CONDITION:NREL 'condition';
NREL_RETURN_VALUE: NREL 'return_value';
NREL_FUNCTION_PROTOTYPE: NREL 'function_prototype';
NREL_ARGUMENT: NREL 'argument';
NREL_ITERATION_CHANGE: NREL 'iteration_change';
NREL_ITERATION_BODY: NREL 'iteration_body';
NREL_INTERRUPT: NREL'interrupt';


CONCEPT_VARIABLE: CONCEPT'variable';
CODE_BLOCK:CONCEPT'code_block';
FOR:CONCEPT'for';
BREAK:CONCEPT'break';
CALLED_METHOD:'called_method';
CONCEPT_ARGUMENT: CONCEPT 'argument';
CONCEPT_ITERATION_STATEMENT: CONCEPT'iteration_statement';
CONCEPT: 'concept_';


OPERATOR:'operator_';
OPERATOR_LESS:OPERATOR 'less';
OPERATOR_DECREMENT:OPERATOR 'decrement';



operators:OPERATOR_LESS|OPERATOR_DECREMENT;

iteration_variable:NREL_ITERATION_VAR DVOETOCHIE NODE
              BLOCK_START UNARY_RELATION_LEFT CONCEPT_VARIABLE END_POINT
              BINARY_RELATION_RIGHT NREL_VALUE DVOETOCHIE NODE
              BLOCK_START UNARY_RELATION_LEFT NUMBER END_POINT BLOCK_END END_POINT BLOCK_END END_POINT
;

role:(UNARY_RELATION_RIGHT ROLE DVOETOCHIE NODE END_POINT);

condition:BINARY_RELATION_RIGHT NREL_CONDITION DVOETOCHIE NODE BLOCK_START BINARY_RELATION_LEFT
NREL_RETURN_VALUE DVOETOCHIE NODE
BLOCK_START UNARY_RELATION_LEFT CALLED_METHOD END_POINT
BINARY_RELATION_RIGHT NREL_FUNCTION_PROTOTYPE DVOETOCHIE operators END_POINT
BINARY_RELATION_RIGHT NREL_ARGUMENT DVOETOCHIE NODE
BLOCK_START  UNARY_RELATION_LEFT  CONCEPT_ARGUMENT END_POINT
role+
BLOCK_END END_POINT
BLOCK_END END_POINT
BLOCK_END END_POINT;

iteration_change: BINARY_RELATION_RIGHT NREL_ITERATION_CHANGE DVOETOCHIE NODE
BLOCK_START
 UNARY_RELATION_LEFT CALLED_METHOD END_POINT
 BINARY_RELATION_RIGHT NREL_FUNCTION_PROTOTYPE DVOETOCHIE operators END_POINT
 BINARY_RELATION_RIGHT NREL_ARGUMENT DVOETOCHIE NODE
 BLOCK_START
 UNARY_RELATION_LEFT CONCEPT_ARGUMENT END_POINT
 UNARY_RELATION_RIGHT ROLE DVOETOCHIE NODE END_POINT
 BLOCK_END END_POINT
 BLOCK_END END_POINT;

iteration_body: BINARY_RELATION_RIGHT NREL_ITERATION_BODY DVOETOCHIE NODE
BLOCK_START UNARY_RELATION_LEFT code* END_POINT BLOCK_END END_POINT;


for_satement:
CODE_BLOCK UNARY_RELATION_RIGHT NODE BLOCK_START
(UNARY_RELATION_RIGHT ROLE  DVOETOCHIE NODE BLOCK_START
UNARY_RELATION_LEFT FOR END_POINT BINARY_RELATION_RIGHT  iteration_variable condition iteration_change iteration_body
);

break_rule: CODE_BLOCK UNARY_RELATION_RIGHT NODE BLOCK_START
 UNARY_RELATION_RIGHT ROLE  DVOETOCHIE NODE      BLOCK_START
 UNARY_RELATION_LEFT  CONCEPT_ITERATION_STATEMENT END_POINT
 BINARY_RELATION_RIGHT NREL_INTERRUPT DVOETOCHIE NODE
 BLOCK_START UNARY_RELATION_LEFT BREAK END_POINT
 BLOCK_END END_POINT
 BLOCK_END END_POINT
 BLOCK_END END_POINT?;




code:for_satement|break_rule;

cr:code+;

